@unnamed_33(0) = "Warning: Queue_int::pop: empty queue"
@unnamed_98(1) = "q.size() != N after pushes"
@unnamed_102(2) = "Head != i"
@unnamed_105(3) = "Failed: q.pop() != i"
@unnamed_110(4) = "q.size() != N - i - 1"
@unnamed_111(5) = "Passed tests."
func array.size %unnamed_1(6) {
b(7):
	%unnamed_0(8) = load %unnamed_1(6)
	ret %unnamed_0(8)
}

func __global_init {
b(9):
	%__init_ret(10) = call main
	ret %__init_ret(10)
}

func Queue_int_push %this(11) %v(12) {
entry(13):
	%unnamed_2(14) = call Queue_int_size %this(11)
	%unnamed_3(15) = add %this(11) 0
	%unnamed_4(16) = load %unnamed_3(15)
	%unnamed_5(17) = call array.size %unnamed_4(16)
	%unnamed_6(18) = sub %unnamed_5(17) 1
	%unnamed_7(19) = eq %unnamed_2(14) %unnamed_6(18)
	br %unnamed_7(19) if_then(20) if_exit(21)
if_then(20):
	call Queue_int_doubleStorage %this(11)
	jump if_exit(21)
if_exit(21):
	%unnamed_8(22) = add %this(11) 0
	%unnamed_9(23) = add %this(11) 8
	%unnamed_10(24) = load %unnamed_8(22)
	%unnamed_11(25) = load %unnamed_9(23)
	%unnamed_12(26) = add %unnamed_11(25) 1
	%unnamed_13(27) = mul %unnamed_12(26) 4
	%unnamed_14(28) = add %unnamed_10(24) %unnamed_13(27)
	store %v(12) %unnamed_14(28)
	%unnamed_15(29) = add %this(11) 8
	%unnamed_16(30) = add %this(11) 8
	%unnamed_17(31) = load %unnamed_16(30)
	%unnamed_18(32) = add %unnamed_17(31) 1
	%unnamed_19(33) = add %this(11) 0
	%unnamed_20(34) = load %unnamed_19(33)
	%unnamed_21(35) = call array.size %unnamed_20(34)
	%unnamed_22(36) = mod %unnamed_18(32) %unnamed_21(35)
	store %unnamed_22(36) %unnamed_15(29)
	ret
}

func Queue_int_top %this(37) {
entry(38):
	%unnamed_23(39) = add %this(37) 0
	%unnamed_24(40) = add %this(37) 4
	%unnamed_25(41) = load %unnamed_23(39)
	%unnamed_26(42) = load %unnamed_24(40)
	%unnamed_27(43) = add %unnamed_26(42) 1
	%unnamed_28(44) = mul %unnamed_27(43) 4
	%unnamed_29(45) = add %unnamed_25(41) %unnamed_28(44)
	%unnamed_30(46) = load %unnamed_29(45)
	ret %unnamed_30(46)
}

func Queue_int_pop %this(47) {
entry(48):
	%unnamed_31(49) = call Queue_int_size %this(47)
	%unnamed_32(50) = eq %unnamed_31(49) 0
	br %unnamed_32(50) if_then(51) if_exit(52)
if_then(51):
	call println @unnamed_33(0)
	jump if_exit(52)
if_exit(52):
	%unnamed_34(53) = call Queue_int_top %this(47)
	%res(54) = move %unnamed_34(53)
	%unnamed_35(55) = add %this(47) 4
	%unnamed_36(56) = add %this(47) 4
	%unnamed_37(57) = load %unnamed_36(56)
	%unnamed_38(58) = add %unnamed_37(57) 1
	%unnamed_39(59) = add %this(47) 0
	%unnamed_40(60) = load %unnamed_39(59)
	%unnamed_41(61) = call array.size %unnamed_40(60)
	%unnamed_42(62) = mod %unnamed_38(58) %unnamed_41(61)
	store %unnamed_42(62) %unnamed_35(55)
	ret %res(54)
}

func Queue_int_size %this(63) {
entry(64):
	%unnamed_43(65) = add %this(63) 8
	%unnamed_44(66) = add %this(63) 0
	%unnamed_45(67) = load %unnamed_44(66)
	%unnamed_46(68) = call array.size %unnamed_45(67)
	%unnamed_47(69) = load %unnamed_43(65)
	%unnamed_48(70) = add %unnamed_47(69) %unnamed_46(68)
	%unnamed_49(71) = add %this(63) 4
	%unnamed_50(72) = load %unnamed_49(71)
	%unnamed_51(73) = sub %unnamed_48(70) %unnamed_50(72)
	%unnamed_52(74) = add %this(63) 0
	%unnamed_53(75) = load %unnamed_52(74)
	%unnamed_54(76) = call array.size %unnamed_53(75)
	%unnamed_55(77) = mod %unnamed_51(73) %unnamed_54(76)
	ret %unnamed_55(77)
}

func Queue_int_doubleStorage %this(78) {
entry(79):
	%unnamed_56(80) = add %this(78) 0
	%unnamed_57(81) = load %unnamed_56(80)
	%copy(82) = move %unnamed_57(81)
	%unnamed_58(83) = add %this(78) 4
	%unnamed_59(84) = load %unnamed_58(83)
	%begCopy(85) = move %unnamed_59(84)
	%unnamed_60(86) = add %this(78) 8
	%unnamed_61(87) = load %unnamed_60(86)
	%endCopy(88) = move %unnamed_61(87)
	%unnamed_62(89) = add %this(78) 0
	%unnamed_64(90) = call array.size %copy(82)
	%unnamed_65(91) = mul %unnamed_64(90) 2
	%unnamed_66(92) = mul %unnamed_65(91) 4
	%unnamed_67(93) = add %unnamed_66(92) 4
	%unnamed_63(94) = alloc %unnamed_67(93)
	store %unnamed_65(91) %unnamed_63(94)
	store %unnamed_63(94) %unnamed_62(89)
	%unnamed_68(95) = add %this(78) 4
	store 0 %unnamed_68(95)
	%unnamed_69(96) = add %this(78) 8
	store 0 %unnamed_69(96)
	%i(97) = move %begCopy(85)
	jump while_cond(98)
while_cond(98):
	%unnamed_70(99) = neq %i(97) %endCopy(88)
	br %unnamed_70(99) while_loop(100) while_exit(101)
while_loop(100):
	%unnamed_71(102) = add %this(78) 0
	%unnamed_72(103) = add %this(78) 8
	%unnamed_73(104) = load %unnamed_71(102)
	%unnamed_74(105) = load %unnamed_72(103)
	%unnamed_75(106) = add %unnamed_74(105) 1
	%unnamed_76(107) = mul %unnamed_75(106) 4
	%unnamed_77(108) = add %unnamed_73(104) %unnamed_76(107)
	%unnamed_78(109) = add %i(97) 1
	%unnamed_79(110) = mul %unnamed_78(109) 4
	%unnamed_80(111) = add %copy(82) %unnamed_79(110)
	%unnamed_81(112) = load %unnamed_80(111)
	store %unnamed_81(112) %unnamed_77(108)
	%unnamed_82(113) = add %this(78) 8
	%unnamed_83(114) = load %unnamed_82(113)
	%unnamed_84(115) = add %unnamed_83(114) 1
	store %unnamed_84(115) %unnamed_82(113)
	%unnamed_85(116) = add %i(97) 1
	%unnamed_86(117) = call array.size %copy(82)
	%unnamed_87(118) = mod %unnamed_85(116) %unnamed_86(117)
	%i(97) = move %unnamed_87(118)
	jump while_cond(98)
while_exit(101):
	ret
}

func Queue_int_constructor %this(119) {
entry(120):
	%unnamed_88(121) = add %this(119) 4
	store 0 %unnamed_88(121)
	%unnamed_89(122) = add %this(119) 8
	store 0 %unnamed_89(122)
	%unnamed_90(123) = add %this(119) 0
	%unnamed_92(124) = mul 16 4
	%unnamed_93(125) = add %unnamed_92(124) 4
	%unnamed_91(126) = alloc %unnamed_93(125)
	store 16 %unnamed_91(126)
	store %unnamed_91(126) %unnamed_90(123)
	ret
}

func main {
entry(127):
	%unnamed_94(128) = alloc 12
	call Queue_int_constructor %unnamed_94(128)
	%q(129) = move %unnamed_94(128)
	%N(130) = move 100
	%i(131) = move 0
	jump for_cond(132)
for_cond(132):
	%unnamed_95(133) = lt %i(131) %N(130)
	br %unnamed_95(133) for_loop(134) for_exit(135)
for_loop(134):
	call Queue_int_push %q(129) %i(131)
	jump for_step(136)
for_step(136):
	%i(131) = add %i(131) 1
	jump for_cond(132)
for_exit(135):
	%unnamed_96(137) = call Queue_int_size %q(129)
	%unnamed_97(138) = neq %unnamed_96(137) %N(130)
	br %unnamed_97(138) if_then(139) if_exit(140)
if_then(139):
	call println @unnamed_98(1)
	%unnamed_112(141) = move 1
	jump func_exit(142)
func_exit(142):
	ret %unnamed_112(141)
if_exit(140):
	%i(131) = move 0
	jump for_cond(143)
for_cond(143):
	%unnamed_99(144) = lt %i(131) %N(130)
	br %unnamed_99(144) for_loop(145) for_exit(146)
for_loop(145):
	%unnamed_100(147) = call Queue_int_top %q(129)
	%head(148) = move %unnamed_100(147)
	%unnamed_101(149) = neq %head(148) %i(131)
	br %unnamed_101(149) if_then(150) if_exit(151)
if_then(150):
	call println @unnamed_102(2)
	%unnamed_112(141) = move 1
	jump func_exit(142)
if_exit(151):
	%unnamed_103(152) = call Queue_int_pop %q(129)
	%unnamed_104(153) = neq %unnamed_103(152) %i(131)
	br %unnamed_104(153) if_then(154) if_exit(155)
if_then(154):
	call println @unnamed_105(3)
	%unnamed_112(141) = move 1
	jump func_exit(142)
if_exit(155):
	%unnamed_106(156) = call Queue_int_size %q(129)
	%unnamed_107(157) = sub %N(130) %i(131)
	%unnamed_108(158) = sub %unnamed_107(157) 1
	%unnamed_109(159) = neq %unnamed_106(156) %unnamed_108(158)
	br %unnamed_109(159) if_then(160) if_exit(161)
if_then(160):
	call println @unnamed_110(4)
	%unnamed_112(141) = move 1
	jump func_exit(142)
if_exit(161):
	jump for_step(162)
for_step(162):
	%i(131) = add %i(131) 1
	jump for_cond(143)
for_exit(146):
	call println @unnamed_111(5)
	%unnamed_112(141) = move 0
	jump func_exit(142)
}

